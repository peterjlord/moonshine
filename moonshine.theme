<?php
	use Drupal\Component\Utility\SafeMarkup;
	use Drupal\Core\Url;
	use Drupal\node\NodeInterface;
	use Drupal\Core\Form\FormStateInterface;

	use Drupal\Core\Link;
	use Drupal\Core\Template\Attribute;


	include_once(drupal_get_path('theme', 'moonshine') . '/includes/functions.inc');


/**
 * @file
 * Functions to support theming in the moonshine theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function moonshine_preprocess_html(array &$variables) {
	$svg = file_get_contents(drupal_get_path('theme', 'moonshine') . '/images/svg-symbols.svg');
  $variables['svg_icons'] = $svg;
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}
function moonshine_preprocess(array &$variables, $hook) {

}
function moonshine_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');
  $form['#attached']['library'][] = 'seven/node-form';

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = array(
    '#attributes' => array('class' => array('entity-meta__header')),
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => array(
        'class' => 'entity-meta__title',
      ),
    ),
    'changed' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__last-saved', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ),
    'author' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('author', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ),
  );
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_page_attachments_alter().
 */
function moonshine_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function moonshine_preprocess_page(array &$variables) {
	$theme = \Drupal::theme()->getActiveTheme()->getName();

	$variables['svg'] = drupal_get_path('theme', 'moonshine') . '/images/svg-symbols.svg';
	moonshine_backtotop($variables, $theme);
	moonshine_display_grid($variables, $theme);
	moonshine_preprocess_social($variables);
	moonshine_footer($variables, $theme);
	if (!empty($variables['node'])) {
    $node = $variables['node'];
		if (moonshine_layouts_is_fluid($node)) {
      $variables['is_fluid'] = true;
		}
	}
	if (isset($variables['node'])) {
		/*
    $node = $variables['node'];
		if ($node->__isset('field_image')) {
      $field_image = $node->get('field_image');
      $image_uri = $field_image->entity->getFileUri();
			
			$url = \Drupal\image\Entity\ImageStyle::load('original')->buildUrl($image_uri);
			$variables['field_image'] = $url; 
			$variables['title'] = $node->title->view();
		}
		*/
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function moonshine_theme_suggestions_page_alter(array &$suggestions, array $variables) {
	if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
	}
}
function moonshine_preprocess_breadcrumb(&$variables){
	$breadcrumb = &$variables['breadcrumb'];
  // Optionally get rid of the homepage link.
  $show_breadcrumb_home = _moonshine_setting('breadcrumb_home');
  if (!$show_breadcrumb_home) {
    array_shift($breadcrumb);
  }
  else {
    $variables['attributes']['class'][] = "breadcrumb-with-home";
  }

  // Add the 'you are here'.
  $variables['breadcrumb_text'] = _moonshine_setting('breadcrumb_text');
	
  if (_moonshine_setting('breadcrumb_title') && !empty($breadcrumb)) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $variables['attributes']['class'][] = "breadcrumb-with-title";
      $breadcrumb[] = array(
        'text' => $page_title,
        'attributes' => new Attribute(array('class' => array('active'))),
      );
    }
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function moonshine_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function moonshine_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function moonshine_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function moonshine_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function moonshine_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function moonshine_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function moonshine_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function moonshine_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function moonshine_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function moonshine_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function moonshine_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function moonshine_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $link += array(
    'localized_options' => array(),
  );

	$svg = moonshine_preprocess_menu_local_task_svg($variables['element']['#link']['url']->getRouteName());
	if($svg) {
	$svg =<<<EOD
<svg class="$svg"><use xlink:href="#$svg"></use></svg>
EOD;
	} else {
		$svg = '';
	}
	$title = SafeMarkup::format($svg . '<span>@text</span>', array('@text' => $link['title']));
  $variables['link'] = array(
    '#type' => 'link',
    '#title' => $title,
    '#url' => $link['url'],
    '#options' => $link['localized_options'],
  );
}
function moonshine_preprocess_menu_local_task_svg($link_name) {
	// return class names for menus
	//ksm($link_name);
	switch($link_name) {
		case 'entity.node.canonical':
		case 'entity.user.canonical':
			return 'search';
		case 'entity.node.edit_form':
		case 'entity.user.edit_form':
			return 'pencil';
		case 'entity.node.delete_form':
			return 'bin';
		case 'entity.node.devel_load':
		case 'entity.user.devel_load':
			return 'bug';
		case 'entity.node.version_history':
			return 'tree';
		case 'user.login':
			return 'usercheck';
		case 'user.register':
			return 'userplus';
		case 'user.pass':
			return 'key';
		case 'shortcut.set_switch':
			return 'wrench';
		default:
			return false;
	}
}
/**
 * Implements hook_preprocess_menu().
 * 
 * Workaround for randomly lost menu item options: load link entities and
 * restore lost link attributes.
 */
function moonshine_preprocess_menu(&$variables) {
}
function moonshine_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	//ksm($form_id);
}

function moonshine_form_search_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	$form['actions']['submit']['#type'] =  'image_button';
	$form['actions']['submit']['#src'] =  drupal_get_path('theme', 'moonshine') . '/images/svg-inuse/135-search.svg'; 
}
function moonshine_backtotop(&$variables, $theme) {
  $top = _moonshine_setting('back_to_top', $theme);
	if(_moonshine_setting('back_to_top', $theme)) {
    $variables['back_to_top'] = Url::fromRoute('<current>', array(), array('absolute' => TRUE, 'fragment'=> 'header-top'))->toString();
	}
}
function moonshine_display_grid(&$variables, $theme) {
  $display_grid = _moonshine_setting('display_grid', $theme);
	if(_moonshine_setting('display_grid', $theme)) {
		$variables['display_grid'] = TRUE;
	}	
}
function  moonshine_preprocess_social(&$variables) {
	$social= _ms_setting('social');
  if($social) {
    // Add social media options.
    $social_options = array(
    'facebook' => 'facebook',
    'twitter' => 'twitter',
    'googleplus' => 'google',
    'linkedin' => 'linkedIn',
    'reddit' => 'reddit',
	);
  // Loop through each option and create a link if it exists.
	foreach ($social_options as $class => $option) {
   	if(isset($social[$option]) && !empty($social[$option])) {
        $url = \Drupal\Core\Url::fromUri($social[$option]);
        $options = array(
          'attributes' => array(
            'class' => array($class),
           ),
         );
         $url->setOptions($options);
				$title = SafeMarkup::format('<svg class="' .$class .'"><use xlink:href="#' .$class . '"></use></svg>', array('@text' => ''));
         $link = Link::fromTextAndUrl($title, $url);
         $social_icons[$option] = array(
            '#markup' => $link->toString(),
            '#wrapper_attributes' => array(
              'class' => array(
                "social-link",
              ),
            ),
         );
       }
     }
   }
  // Display as item list
  if (!empty($social_icons)) {
    $variables['social_icons'] = array(
      '#theme' => 'item_list',
      '#items' => $social_icons,
      '#attributes' => array('id' => 'social-links', 'class' => 'social-links'),
     );
  }
}
function moonshine_footer(&$variables, $theme) {
  $flinks = _ms_setting('footer-links', $theme);
  $footer_links = [];
	for ($i = 1; $i < 3; $i++) {
    $link = ($flinks['link'.$i]);
    $link_url = ($flinks['link'.$i . '_url']);
    $footer_links[] = "<a href=\"$link_url\">$link</a>";
	}
  $variables['footer_links'] = $footer_links;
  $variables['footer_copy'] = _ms_setting('footer_copy', $theme);
}


function moonshine_preprocess_paragraph__banner(&$variables) {
  $paragraph = $variables['paragraph'];
	if (!$paragraph->field_image->isEmpty()) {
    $image = $paragraph->field_image->entity->url();
    $variables['attributes']['class'][] = 'parallax';
    $variables['attributes']['style'][] = 'background-image: url("' . $image . '");';
	}
}
function moonshine_preprocess_paragraph__sliding_panels(&$variables) {
  $paragraph = $variables['paragraph'];
}
function moonshine_preprocess_paragraph__panel(&$variables) {
  $paragraph = $variables['paragraph'];
  $variables['url'] = $paragraph->field_image->entity->url();
  $variables['title'] = $paragraph->field_title->value;
}
/**
 * Check if current node is using the fluid layout.
 *
 * @param \Drupal\node\NodeInterface $node
 * @return \Drupal\node\NodeInterface|null
 */
function moonshine_layouts_is_fluid(NodeInterface $node) {
	// Make sure we're on the node page.
  if (node_is_page($node)) {
		return $node;
		/*
    $entity_display = Ds::getDisplay('node', $node->bundle(), 'full');
    if ($entity_display && $ds_layout_settings = $entity_display->getThirdPartySetting('ds', 'layout')) {
      try {
        // Get layout plugin.
        $layout = Layout::layoutPluginManager()->getDefinition($ds_layout_settings['id']);
        if (!empty($layout['category']) && $layout['category'] == LEADGEN_LAYOUT_FLUID) {
          return $node;
        }
      }
      catch (PluginException $e) {
        watchdog_exception('leadgen_layout', $e);
      }
    }
		*/
  }
  return NULL;
}
